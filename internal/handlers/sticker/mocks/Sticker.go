// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	actions "tg-bot-sticker-go/internal/models/actions"

	mock "github.com/stretchr/testify/mock"

	telebot "gopkg.in/telebot.v3"
)

// Sticker is an autogenerated mock type for the Sticker type
type Sticker struct {
	mock.Mock
}

// Done provides a mock function with given fields: ctx, msg, b
func (_m *Sticker) Done(ctx context.Context, msg *telebot.Message, b *telebot.Bot) (int, error) {
	ret := _m.Called(ctx, msg, b)

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *telebot.Message, *telebot.Bot) (int, error)); ok {
		return rf(ctx, msg, b)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *telebot.Message, *telebot.Bot) int); ok {
		r0 = rf(ctx, msg, b)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *telebot.Message, *telebot.Bot) error); ok {
		r1 = rf(ctx, msg, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Prepare provides a mock function with given fields: ctx, msg, b, code
func (_m *Sticker) Prepare(ctx context.Context, msg *telebot.Message, b *telebot.Bot, code int) error {
	ret := _m.Called(ctx, msg, b, code)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *telebot.Message, *telebot.Bot, int) error); ok {
		r0 = rf(ctx, msg, b, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, msg, b
func (_m *Sticker) Update(ctx context.Context, msg *telebot.Message, b *telebot.Bot) (actions.Actions, error) {
	ret := _m.Called(ctx, msg, b)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 actions.Actions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *telebot.Message, *telebot.Bot) (actions.Actions, error)); ok {
		return rf(ctx, msg, b)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *telebot.Message, *telebot.Bot) actions.Actions); ok {
		r0 = rf(ctx, msg, b)
	} else {
		r0 = ret.Get(0).(actions.Actions)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *telebot.Message, *telebot.Bot) error); ok {
		r1 = rf(ctx, msg, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSticker creates a new instance of Sticker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSticker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sticker {
	mock := &Sticker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
